@model OrderManualConfirmModel
@using SmartStore.Web.Models.Order;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    Html.AddCssFileParts(true, "~/Content/x-editable/bootstrap-editable.css");
    Html.AppendScriptParts(true, "~/Content/x-editable/bootstrap-editable.js");

    //title
    Html.AddTitleParts(T("PageTitle.ReturnItems").Text);
}
<div class="page return-request-page">
    <div class="page-title">
        <h1>@string.Format(@T("ReturnRequests.Title").Text, Model.OrderId)</h1>
    </div>

    <div class="page-body">
        @if (!String.IsNullOrEmpty(Model.Result))
        {
            <div class="result">
                @Model.Result</div>
        }
        else
        {
            using (Html.BeginForm())
            {
            <fieldset class="form-fields products-box">
                <legend>@T("ReturnRequests.SelectProduct(s)")</legend>
                <dl>
                    <dd>
                        <table class="table table-striped table-hover">
							<colgroup>
								<col />
								<col />
								<col width="1" />								
							</colgroup>
                            <thead>
                                <tr>
                                    <th class="a-center">
                                        @T("ReturnRequests.Products.Name")
                                    </th>
                                    <th class="a-center">
                                        @T("ReturnRequests.Products.Price")
                                    </th>
                                    <th class="a-center">
                                        @T("ReturnRequests.Products.Quantity")
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.Items)
                                {   
                                    <tr>
                                        <td class="a-left">
                                            <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })" title="View details">@item.ProductName</a>
                                            @if (!String.IsNullOrEmpty(item.AttributeInfo))
                                            {
                                                <div class="attributes">
                                                    @Html.Raw(item.AttributeInfo)
                                                </div>
                                            }
                                        </td>
                                        <td class="a-left">
                                            @item.UnitPrice
                                        </td>
                                        <td class="a-left">
                                            <select name="quantity@(item.Id)">
                                                @for (int i = 0; i <= item.Quantity; i++)
                                                {
                                                    <option value="@(i)">@(i)</option>
                                                }
                                            </select>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </dd>
                </dl>
            </fieldset>

            <div class="opt-info payment-method-info">
                 
            </div>

			@*<table class="table table-striped table-hover">
			<tbody>
				<tr>
					<td>
						@Html.LabelFor(model => model.ReturnReason)
					</td>
					<td>
						@Html.DropDownListFor(model => model.ReturnReason, Model.AvailableReturnReasons, new { @class = "return-reasons" })
					</td>
				</tr>
				<tr>
					<td>
						@Html.LabelFor(model => model.ReturnAction)
					</td>
					<td>
						@Html.DropDownListFor(model => model.ReturnAction, Model.AvailableReturnActions, new { @class = "return-actions" })
					</td>
				</tr>
				<tr>
					<td>
						@Html.LabelFor(model => model.Comments)
					</td>
					<td>
						@Html.TextAreaFor(model => model.Comments, new { @class = "comment", style = "width:400px;" })
						@Html.ValidationMessageFor(model => model.Comments)
					</td>
				</tr>
			</tbody>
			</table>*@
			
            <div class="clear"></div>
			
            <div class="buttons">
				<button type="submit" name="submit-return-request" value="save" class="btn btn-primary">
					<i class="fa fa-check"></i>
					@T("Submit Payment")
				</button>
            </div>
            }
        }
    </div>
</div>

<script>
    $(function () {

        var systemName = '@Model.PaymentMethodSystemName';

        $.ajax({
            type: 'POST',
            cache: false,
            dataType: 'html',
            async: false,
            url: '@Url.Action("ManualConfirmInfoAjax")',
            data: { paymentMethodSystemName: systemName, orderId: @Model.OrderId },
            success: function (html) {
                if (!html)
                    return;

                var panel = $('.opt-info');

                if (panel.length == 0) {
                    panel = $('<div class="opt-info payment-method-info"></div>')
                        .appendTo(item)
                        .data('system-name', systemName)
                        .data('lazy-info', true);
                }

                panel.html(html);
                applyCommonPlugins(panel);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                console.error(thrownError);
            },
            complete: function () {
                // remove all other info containers
                //removeInfoPanels();
            }
        });
    });
</script>
