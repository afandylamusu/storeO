@model StateProvinceModel
@using Telerik.Web.Mvc.UI;
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.CountryId)
@*@if (ViewBag.RefreshPage == true)
{
    <script type="text/javascript">
        try {window.opener.document.forms['@(ViewBag.formId)'].@(ViewBag.btnId).click();}
        catch (e){}
        window.close();
    </script>
}*@

@Html.SmartStore().TabStrip().Name("state-edit").Items(x =>
{
    x.Add().Text(T("Admin.Configuration.Countries.States.Tabs.Info").Text).Content(TabInfo()).Selected(true);
    x.Add().Text(T("Admin.Configuration.Countries.States.Tabs.Items").Text).Content(TabStateItems());
    //x.Add().Text("{0} ({1})".FormatInvariant(T("Admin.Configuration.Countries.States"), Model.NumberOfStates)).Content(TabStates());
    //x.Add().Text(T("Admin.Common.Stores").Text).Content(TabStores());

    //generate an event
    EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "state-edit", this.Html, this.Model));
})

@helper TabInfo()
{

    @(Html.LocalizedEditor<StateProvinceModel, StateProvinceLocalizedModel>("state-localized",
        @<table class="adminContent">
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.Locales[item].Name)
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => Model.Locales[item].Name)
                    @Html.ValidationMessageFor(model => model.Locales[item].Name)
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    @Html.HiddenFor(model => model.Locales[item].LanguageId)
                </td>
            </tr>
        </table>
    ,
        @<table class="adminContent">
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.Name)
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Name)
                    @Html.ValidationMessageFor(model => model.Name)
                </td>
            </tr>
        </table>
    ))
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Abbreviation)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Abbreviation)
                @Html.ValidationMessageFor(model => model.Abbreviation)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Published)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Published)
                @Html.ValidationMessageFor(model => model.Published)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.DisplayOrder1)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DisplayOrder1)
                @Html.ValidationMessageFor(model => model.DisplayOrder1)
            </td>
        </tr>
    </table>

}

@helper TabStateItems()
{
    if (Model.Id > 0)
    {
        <table class="adminContent">
            <tr>
                <td>
                    @(Html.Telerik().Grid<DestinationItemModel>()
                        .Name("destinations-grid")
                        .DataKeys(x =>
                        {
                            x.Add(y => y.Id).RouteKey("Id");
                        })
                        .DataBinding(dataBinding =>
                        {
                            dataBinding.Ajax()
                                .Select("Destinations", "Destination", new { stateId = Model.Id })
                                .Delete("DestinationDelete", "Destination");
                        })
                        .Columns(columns =>
                        {
                            columns.Bound(x => x.DestinationType)
                                .ClientTemplate("<#= DestinationTypeName #>")
                                .Width(100)
                                .Centered();
                            columns.Bound(x => x.Name);
                            //TODO display localized values here
                            columns.Bound(x => x.Abbreviation)
                                .Width(100)
                                .Centered();

                            columns.Bound(x => x.ParentName);
                                
                            columns.Bound(x => x.Published)
                                .Template(item => @Html.SymbolForBool(item.Published))
                                .ClientTemplate(@Html.SymbolForBool("Published"))
                                .Centered();
                            columns.Bound(x => x.DisplayOrder)
                                .Centered();
                            columns.Bound(x => x.Id)
                                .Centered()
                                .Width(120)
                                .ClientTemplate("<input type='submit' value='" + @T("Admin.Common.Edit").Text + "' onclick=\"" + "javascript:OpenWindow('" + @Url.Content("~/Admin/Destination/DestinationEditPopup/") + "<#= Id #>?stateId=<#= StateProvinceId #>&btnId=btnRefresh&formId=state-form', 800, 250, true); return false;\" class='t-button' />")
                                .Title("");
                            columns.Command(commands =>
                            {
                                commands.Delete().Localize(T);
                            }).Width(120);
                        })
                        .ClientEvents(x => x.OnError("grid_onError"))
                        .EnableCustomBinding(true))
                </td>
            </tr>
            <tr>
                <td>
                    <button type="submit" id="btnAddNewDestination" name="btnAddNewDestination" class="btn btn-below"
                            onclick="javascript:OpenWindow('@(Url.Action("DestinationCreatePopup", "Destination", new { stateId = Model.Id, btnId = "btnRefresh", formId = "state-form" }))', 800, 250, true); return false;">
                        <i class="fa fa-plus"></i>&nbsp;@T("Admin.Configuration.Countries.States.Destinations.AddNew")
                    </button>
                    <input type="submit" id="btnRefresh" name="btnRefresh" style="display: none" />
                    <script type="text/javascript">
                        $(document).ready(function () {
                            $('#btnRefresh').click(function () {
                                //refresh grid
                                var optionsGrid = $("#destinations-grid");
                                optionsGrid.data('tGrid').ajaxRequest();

                                //return false to don't reload a page
                                return false;
                            });
                        });
                    </script>
                </td>
            </tr>
        </table>

        <script type="text/javascript">
            function grid_onError(e) {
                alert(e.XMLHttpRequest.responseText);
                e.preventDefault();
            }
        </script>
    }
}