@{
    Layout = "~/Administration/Views/Shared/_AdminPopupLayout.cshtml";
}
@model CompanyModel.AddCompanyCustomerModel
@using Telerik.Web.Mvc.UI;
@using System.Globalization;

@{
    var gridPageSize = EngineContext.Current.Resolve<SmartStore.Core.Domain.Common.AdminAreaSettings>().GridPageSize;

    //page title
    ViewBag.Title = T("Admin.Customer.Companies.Customers.AddNew").Text;
}
@using Telerik.Web.Mvc.UI;
@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            @T("Admin.Companies.Customers.AddNew.Popup.Title")
        </div>
    </div>

    if (ViewBag.RefreshPage == true)
    {
        <script type="text/javascript">
            try {window.opener.document.forms['@(ViewBag.formId)'].@(ViewBag.btnId).click();}
            catch (e){}
            window.close();
        </script>
    }


    <table width="100%">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SearchCustomerRoleIds)
            </td>
            <td class="adminData">
                @foreach (var customerRole in Model.AvailableCustomerRoles)
                {
                    <label class="checkbox">
                        <input type="checkbox" name="SearchCustomerRoleIds" value="@customerRole.Id"
                               @if (Model.SearchCustomerRoleIds != null && Model.SearchCustomerRoleIds.Contains(customerRole.Id)) { <text> checked="checked" </text>  } /> @customerRole.Name
                        </label>
                }
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SearchEmail)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.SearchEmail)
            </td>
        </tr>
        @if (Model.UsernamesEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.SearchUsername)
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => Model.SearchUsername)
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SearchFirstName)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.SearchFirstName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SearchLastName)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.SearchLastName)
            </td>
        </tr>
        @if (Model.DateOfBirthEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.SearchDayOfBirth)
                </td>
                <td class="adminData">
                    @{
                        var monthOfBirthValues = new List<SelectListItem>();
                        //monthOfBirthValues.Add(new SelectListItem() { Text = T("Admin.Customers.Customers.List.SearchDateOfBirth.Month").Text, Value = "0" });
                        for (int i = 1; i <= 12; i++)
                        {
                            monthOfBirthValues.Add(new SelectListItem() { Text = i.ToString(CultureInfo.InvariantCulture), Value = i.ToString(CultureInfo.InvariantCulture) });
                        }
                        var dayOfBirthValues = new List<SelectListItem>();
                        //dayOfBirthValues.Add(new SelectListItem() { Text = T("Admin.Customers.Customers.List.SearchDateOfBirth.Day").Text, Value = "0" });
                        for (int i = 1; i <= 31; i++)
                        {
                            dayOfBirthValues.Add(new SelectListItem() { Text = i.ToString(CultureInfo.InvariantCulture), Value = i.ToString(CultureInfo.InvariantCulture) });
                        }
                    }
                    @Html.DropDownListFor(model => Model.SearchMonthOfBirth, monthOfBirthValues, T("Admin.Customers.Customers.List.SearchDateOfBirth.Month").Text, new { @class = "autowidth" })
                    @Html.DropDownListFor(model => Model.SearchDayOfBirth, dayOfBirthValues, T("Admin.Customers.Customers.List.SearchDateOfBirth.Day").Text, new { @class = "autowidth" })
                </td>
            </tr>
                        }

        @if (Model.CompanyEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.SearchCompany)
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => Model.SearchCompany)
                </td>
            </tr>
        }
        @if (Model.PhoneEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.SearchPhone)
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => Model.SearchPhone)
                </td>
            </tr>
        }
        @if (Model.ZipPostalCodeEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.SearchZipPostalCode)
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => Model.SearchZipPostalCode)
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                &nbsp;
            </td>
            <td class="adminData">
                <button type="submit" id="search-customers" name="search-customers" class="btn"><i class="fa fa-search"></i>&nbsp;@T("Admin.Common.Search")</button>
            </td>
        </tr>
    </table>
    <p>
    </p>
    <table class="adminContent">
        <tr>
            <td>
                @(Html.Telerik().Grid<CustomerModel>(Model.Customers.Data)
                    .Name("customers-grid")
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.Id)
                            .Template(x => string.Format("<input type='checkbox' name='SelectedCustomerIds' value='{0}' class='checkboxGroups'/>", x.Id))
                            .ClientTemplate("<input type='checkbox' name='SelectedCustomerIds' value='<#= Id #>' class='checkboxGroups'/>")
                            .Width(50)
                            .HtmlAttributes(new { style = "text-align:center" });
                        columns.Bound(x => x.Id);
                        columns.Bound(x => x.Email)
                            .Template(x => Html.ActionLink(x.Email, "Edit", "Customer", new { id = x.Id }, new { }))
                            .ClientTemplate("<a href=\"" + @Url.Content("~/Admin/Customer/Edit/") + "<#= Id #>\"><#= Email #></a>");
                        columns.Bound(x => x.Username)
                            .Visible(Model.UsernamesEnabled);
                        columns.Bound(x => x.FullName);
                        columns.Bound(x => x.CustomerRoleNames);
                        columns.Bound(x => x.Company)
                            .Visible(Model.CompanyEnabled);
                        columns.Bound(x => x.Phone)
                            .Visible(Model.PhoneEnabled);
                        columns.Bound(x => x.ZipPostalCode)
                            .Visible(Model.ZipPostalCodeEnabled);
                        columns.Bound(x => x.Active)
                             .Template(item => @Html.SymbolForBool(item.Active))
                             .ClientTemplate(@Html.SymbolForBool("Active"))
                             .Centered();
                        columns.Bound(x => x.CreatedOn);
                        columns.Bound(x => x.LastActivityDate);
                    })
                    .Pageable(settings => settings.Total(Model.Customers.Total).PageSize(gridPageSize).Position(GridPagerPosition.Both))
                    .DataBinding(dataBinding => dataBinding.Ajax().Select("MemberAddPopupList", "Company"))
                    .ClientEvents(events => events.OnDataBinding("onDataBinding"))
                    .EnableCustomBinding(true))
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <p></p>
                <button type="submit" name="save" value="save" class="btn btn-primary"><i class="fa fa-check"></i>&nbsp;@T("Admin.Common.Save")</button>
            </td>
        </tr>
    </table>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#search-customers').click(function () {
                var grid = $('#customers-grid').data('tGrid');
                grid.currentPage = 1; //new search. Set page size to 1
                grid.ajaxRequest();
                return false;
            });
        });

        $("#@Html.FieldIdFor(model => model.SearchFirstName)").keydown(function (event) {
            if (event.keyCode == 13) {
                $("#search-customers").click();
                return false;
            }
        });

        function onDataBinding(e) {
            var searchModel = {
                SearchProductName: $('#@Html.FieldIdFor(model => model.SearchFirstName)').val(),
                SearchCategoryId: $('#SearchCategoryId').val(),
                SearchManufacturerId: $('#SearchManufacturerId').val(),
                SearchProductTypeId: $('#SearchProductTypeId').val(),
                SearchCompanyId: $('#SearchCompanyId').val()
            };
            e.data = searchModel;
        }
    </script>
}

